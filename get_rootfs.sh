#!/bin/bash
set -e

if ! [ $(id -u) = 0 ]; then
   echo "The script need to be run as root." >&2
   exit 1
fi

if [ $SUDO_USER ]; then
    real_user=$SUDO_USER
else
    real_user=$(whoami)
fi


ARCH="x86_64"
VERSION="2019.09.01"
IMAGE="archlinux-bootstrap-$VERSION-$ARCH.tar.gz"
MIRROR="http://mirror.rackspace.com/archlinux/iso/$VERSION/$IMAGE"

FAKEROOT="https://aur.archlinux.org/cgit/aur.git/snapshot/fakeroot-tcp.tar.gz"
DAEMONIZE="https://aur.archlinux.org/cgit/aur.git/snapshot/daemonize.tar.gz"

GENIE="https://github.com/arkane-systems/genie/releases/download/1.2-fix/genie.tar.gz"

# Get the current directory
BUILDDIR=$(cd `dirname $0` && pwd -P)

# ! Fakeroot-tcp no longer necessary with WSL2
# Prepare fakeroot-tcp as the normal (non-root) user
# sudo -u $real_user sh <<EOF
# set -e

# # Get somewhere in tmp to work (as non-root)
# cd \$(mktemp -d)

# # Note you'll need the dependencies for this...
# curl -LO "${FAKEROOT}"
# tar xzf "fakeroot-tcp.tar.gz"
# cd fakeroot-tcp
# makepkg
# cp "\$(pwd)/\$(ls | grep pkg.)" "$BUILDDIR/fakeroot.pkg.gz"
# EOF

# Prepare daemonize as the normal (non-root) user
sudo -u $real_user sh <<EOF
set -e

# Get somewhere in tmp to work (as non-root)
cd \$(mktemp -d)

# Note you'll need the dependencies for this...
curl -LO "$DAEMONIZE"
tar xzf "daemonize.tar.gz"
cd daemonize
makepkg
cp "\$(pwd)/\$(ls | grep pkg.)" "$BUILDDIR/daemonize.pkg.gz"
EOF

# Get a new working directory (as root)
cd $(mktemp -d)

# Get the base image
curl -LO $MIRROR
tar xzf $IMAGE

# Stop us breaking things!
mount --bind root.${ARCH} root.${ARCH}
cd root.${ARCH}

# Set up internet and pacman configs...
cp -r $BUILDDIR/linux/etc/* etc/
sed -i -e 's/#en_US.UTF-8/en_US.UTF-8/' etc/locale.gen
echo "LANG=en_US.UTF-8" > etc/locale.conf
echo "LANGUAGE=en_US.UTF-8" >> etc/locale.conf
echo "LC_ALL=en_US.UTF-8" >> etc/locale.conf

# ! Fakeroot-tcp no longer necessary with WSL2
# Copy over the fakeroot package
# cp "$BUILDDIR/fakeroot.pkg.gz" root/

# Copy over the daemonize package
cp "$BUILDDIR/daemonize.pkg.gz" root/

# ...Initialise pacman
arch-chroot . pacman-key --init
arch-chroot . pacman-key --populate archlinux

# Fix localization
arch-chroot . pacman -Sy --noconfirm sed gzip
arch-chroot . locale-gen

# Update the install, and add stuff!
arch-chroot . pacman -Syu --noconfirm
arch-chroot . pacman -S --noconfirm base base-devel sudo ccache clang pigz pbzip2 git

# Now remove and disable the linux kernel install
arch-chroot . pacman -Rsc --noconfirm linux-firmware
sed -i -e 's/#IgnorePkg   =/IgnorePkg   =/' etc/pacman.conf
rm etc/pacman.d/hooks/90-linux.hook

# ! Fakeroot-tcp no longer necessary with WSL2
# yes | arch-chroot . pacman -U /root/fakeroot.pkg.gz

# We need Genie for systemd support...
# ...Install its dependencies
arch-chroot . pacman -S --noconfirm polkit dotnet-runtime
yes | arch-chroot . pacman -U /root/daemonize.pkg.gz

# ...And install it
cd tmp/
mkdir genie && cd genie
curl -LO $GENIE
tar xzf `basename $GENIE`
rm `basename $GENIE`
cp * ../../usr/local/bin
cd ../../

# ...Set the permissions
arch-chroot . chmod u+s /usr/local/bin/genie
arch-chroot . chmod a+rx /usr/local/bin/genie

# ...Genie recommendations
arch-chroot . systemctl disable getty@tty1

# Finish install
yes | arch-chroot . pacman -Scc

# Now to tidy up...
umount -l .
rm -rf tmp/*
rm -rf root/*
rm -rf var/cache/pacman/pkg/*

# And make the final touches!
echo "# This file was automatically generated by WSL. To stop automatic generation of this file, remove this line." > etc/resolv.conf
sed -i -e "s/^# %wheel ALL=.*NOPASSWD:.*$/%wheel ALL=(ALL) NOPASSWD: ALL/" etc/sudoers

tar --ignore-failed-read -czf ../install.tar.gz *

cp ../install.tar.gz $BUILDDIR
chown $real_user:$real_user $BUILDDIR/install.tar.gz